import os
import io
import json
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BufferedInputFile
from src.handlers.start import admin_menu_keyboard
from src.states.registration import Registration
from src.utils.database import DB_FILE, BEHAVIOR_FILE

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã

def cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

# –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

@router.message(Registration.entering_broadcast_text, lambda m: m.text == "üîô –û—Ç–º–µ–Ω–∞")
async def cancel_broadcast(message: types.Message, state: FSMContext):
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_menu_keyboard())
    await state.clear()

# –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

@router.message(lambda m: m.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    except:
        users = {}

    total = len(users)
    roles = {"–†–æ–¥–∏—Ç–µ–ª—å": 0, "–£—á–∏—Ç–µ–ª—å": 0, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": 0}
    children = 0

    for u in users.values():
        role = u.get("role")
        if role in roles:
            roles[role] += 1
        if role == "–†–æ–¥–∏—Ç–µ–ª—å" and u.get("child_name"):
            children += 1

    try:
        with open(BEHAVIOR_FILE, "r", encoding="utf-8") as f:
            behavior_data = json.load(f)
            behavior_count = len(behavior_data)
    except:
        behavior_count = 0

    msg = (
        "<b>üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"‚Äî –†–æ–¥–∏—Ç–µ–ª–µ–π: <b>{roles['–†–æ–¥–∏—Ç–µ–ª—å']}</b>\n"
        f"‚Äî –£—á–∏—Ç–µ–ª–µ–π: <b>{roles['–£—á–∏—Ç–µ–ª—å']}</b>\n"
        f"‚Äî –ê–¥–º–∏–Ω–æ–≤: <b>{roles['–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']}</b>\n"
        f"üë∂ –£—á–µ–Ω–∏–∫–∏: <b>{children}</b>\n"
        f"üß† –ó–∞–ø–∏—Å–µ–π –ø–æ–≤–µ–¥–µ–Ω–∏—è: <b>{behavior_count}</b>"
    )

    await message.answer(msg, parse_mode="HTML")

# –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≤–µ–¥–µ–Ω–∏—è

@router.message(lambda m: m.text == "üìâ –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
async def behavior_chart(message: types.Message):
    behavior_path = "src/data/behavior.json"

    if not os.path.exists(behavior_path):
        return await message.answer("‚ö†Ô∏è –ü–æ–≤–µ–¥–µ–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")

    with open(behavior_path, "r", encoding="utf-8") as f:
        try:
            data = json.load(f)
        except:
            return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è.")

    scores_by_child = {}
    for entry in data:
        name = entry.get("—É—á–µ–Ω–∏–∫", "‚Äî").strip()
        emoji = entry.get("–æ—Ü–µ–Ω–∫–∞", "").strip()
        score = convert_emoji_to_score(emoji)
        if not score:
            continue
        scores_by_child.setdefault(name, []).append(score)

    if not scores_by_child:
        return await message.answer("‚ùå –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫, –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    names = []
    avgs = []
    colors = []
    for name, values in scores_by_child.items():
        avg = round(sum(values) / len(values), 2)
        names.append(name)
        avgs.append(avg)
        if avg <= 1:
            colors.append("#FF0000")
        elif avg <= 2:
            colors.append("#00EEEE")
        elif avg <= 3:
            colors.append("#FFFF00")
        elif avg <= 4:
            colors.append("#FF00FF")
        else:
            colors.append("#00FF00")

    fig, ax = plt.subplots(figsize=(14, 6))
    ax.bar(names, avgs, color=colors)
    ax.set_title("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É")
    ax.set_ylabel("–û—Ü–µ–Ω–∫–∞ (1‚Äì5)")
    ax.set_ylim(0, 5.5)
    plt.xticks(rotation=90, fontsize=12)

    legend_elements = [
        Patch(facecolor="#FF0000", label="1"),
        Patch(facecolor="#00EEEE", label="2"),
        Patch(facecolor="#FFFF00", label="3"),
        Patch(facecolor="#FF00FF", label="4"),
        Patch(facecolor="#00FF00", label="5")
    ]

    ax.legend(handles=legend_elements, title="–û—Ü–µ–Ω–∫–∏", loc="best")
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close(fig)

    await message.answer_photo(photo=BufferedInputFile(buf.read(), filename="behavior_chart.png"), caption="üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤")

# –ü–µ—Ä–µ–≤–æ–¥ —Å–º–∞–π–ª–∞ –≤ —Ü–∏—Ñ—Ä—É

def convert_emoji_to_score(emoji: str) -> int | None:
    return {
        "1Ô∏è‚É£": 1,
        "2Ô∏è‚É£": 2,
        "3Ô∏è‚É£": 3,
        "4Ô∏è‚É£": 4,
        "5Ô∏è‚É£": 5
    }.get(emoji)

# üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
@router.message(lambda m: m.text == "üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")
async def ask_broadcast_text(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîô –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(Registration.entering_broadcast_text)


@router.message(Registration.entering_broadcast_text)
async def send_broadcast(message: types.Message, state: FSMContext):
    text = message.text.strip()

    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    except Exception:
        return await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    count = 0
    for user_id in users:
        try:
            await message.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>:\n\n{text}",
                parse_mode="HTML"
            )
            count += 1
        except:
            continue

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()


# üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
@router.message(lambda m: m.text == "üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_all_users(message: types.Message):
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    except Exception:
        return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    if not users:
        return await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for u in users.values():
        role = u.get("role", "‚Äî")
        name = u.get("fullname", "‚Äî")
        child = u.get("child_name", "") if role == "–†–æ–¥–∏—Ç–µ–ª—å" else ""
        pin = u.get("pin", "‚Äî")
        text += f"üë§ {name} ({role})\nüîê PIN: <code>{pin}</code>\n"
        if child:
            text += f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child}\n"
        text += "\n"

    await message.answer(text, parse_mode="HTML")


# üìö –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
@router.message(lambda m: m.text == "üìö –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤")
async def show_all_behavior(message: types.Message):
    if not os.path.exists(BEHAVIOR_FILE):
        return await message.answer("üìÅ –§–∞–π–ª —Å –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    try:
        with open(BEHAVIOR_FILE, "r", encoding="utf-8") as f:
            records = json.load(f)
    except Exception:
        return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

    if not records:
        return await message.answer("‚ÑπÔ∏è –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")

    text = "<b>üìö –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, entry in enumerate(records, 1):
        text += (
            f"{i}. üë∂ <b>{entry.get('—É—á–µ–Ω–∏–∫', '‚Äî')}</b>\n"
            f"   üß† {entry.get('–æ—Ü–µ–Ω–∫–∞', '')}\n"
            f"   üí¨ {entry.get('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '')}\n"
            f"   üìÖ {entry.get('–¥–∞—Ç–∞', '‚Äî')}\n\n"
        )

    await message.answer(text, parse_mode="HTML")
