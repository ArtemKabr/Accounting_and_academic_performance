from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.states.registration import Registration
from src.utils.database import load_user_data, append_behavior_entry

router = Router()

# üß† –ù–∞—á–∞–ª–æ: –æ—Ü–µ–Ω–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è
@router.message(lambda m: m.text == "üß† –û—Ü–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
async def start_behavior_rating(message: types.Message, state: FSMContext):
    user = load_user_data(str(message.from_user.id))
    if not user or user.get("role") != "–£—á–∏—Ç–µ–ª—å":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return

    await message.answer("üë∂ –í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è —É—á–µ–Ω–∏–∫–∞, –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:")
    await state.set_state(Registration.entering_behavior_name)

# üë∂ –í–≤–æ–¥ –§–ò–û —É—á–µ–Ω–∏–∫–∞
@router.message(Registration.entering_behavior_name)
async def enter_behavior_name(message: types.Message, state: FSMContext):
    await state.update_data(behavior_name=message.text.strip())

    # üî¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 5-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="1Ô∏è‚É£"), KeyboardButton(text="2Ô∏è‚É£"),
            KeyboardButton(text="3Ô∏è‚É£"), KeyboardButton(text="4Ô∏è‚É£"),
            KeyboardButton(text="5Ô∏è‚É£")
        ]],
        resize_keyboard=True
    )
    await message.answer("üß† –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:", reply_markup=keyboard)
    await state.set_state(Registration.entering_behavior_rating)

# üß† –í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏
@router.message(Registration.entering_behavior_rating)
async def enter_behavior_rating(message: types.Message, state: FSMContext):
    if message.text not in ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1Ô∏è‚É£ –¥–æ 5Ô∏è‚É£.")

    await state.update_data(behavior_rating=message.text)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(Registration.entering_behavior_comment)

# üí¨ –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@router.message(Registration.entering_behavior_comment)
async def enter_behavior_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    behavior = {
        "—É—á–µ–Ω–∏–∫": data["behavior_name"],
        "–æ—Ü–µ–Ω–∫–∞": data["behavior_rating"],  # –±—É–¥–µ—Ç "1Ô∏è‚É£", "2Ô∏è‚É£" –∏ —Ç.–¥.
        "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": message.text.strip()
    }

    append_behavior_entry(behavior)

    msg = (
        f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
        f"üë∂ –£—á–µ–Ω–∏–∫: {behavior['—É—á–µ–Ω–∏–∫']}\n"
        f"üìä –û—Ü–µ–Ω–∫–∞: {behavior['–æ—Ü–µ–Ω–∫–∞']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {behavior['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}"
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

    await message.answer(msg, reply_markup=keyboard)
    await state.clear()
