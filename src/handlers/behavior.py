from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from src.states.registration import Registration
from src.utils.database import load_user_data, save_behavior_data

router = Router()


# –ù–∞—á–∞–ª–æ ‚Äî –≤–≤–æ–¥ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞
@router.message(lambda m: m.text == "üß† –û—Ü–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ")
async def start_behavior_rating(message: types.Message, state: FSMContext):
    user = load_user_data(str(message.from_user.id))
    if not user or user.get("role") != "–£—á–∏—Ç–µ–ª—å":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return

    await message.answer("üë∂ –í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è —É—á–µ–Ω–∏–∫–∞, –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å:")
    await state.set_state(Registration.entering_behavior_name)


# –í–≤–æ–¥ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞
@router.message(Registration.entering_behavior_name)
async def enter_behavior_name(message: types.Message, state: FSMContext):
    await state.update_data(behavior_name=message.text.strip())
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëç –•–æ—Ä–æ—à–æ"), KeyboardButton(text="üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ"), KeyboardButton(text="üëé –ü–ª–æ—Ö–æ")]
        ],
        resize_keyboard=True
    )
    await message.answer("üß† –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–≤–µ–¥–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(Registration.entering_behavior_rating)


# –í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏
@router.message(Registration.entering_behavior_rating)
async def enter_behavior_rating(message: types.Message, state: FSMContext):
    if message.text not in ["üëç –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üëé –ü–ª–æ—Ö–æ"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

    await state.update_data(behavior_rating=message.text)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é):")
    await state.set_state(Registration.entering_behavior_comment)


# –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(Registration.entering_behavior_comment)
async def enter_behavior_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    behavior = {
        "—É—á–µ–Ω–∏–∫": data["behavior_name"],
        "–æ—Ü–µ–Ω–∫–∞": data["behavior_rating"],
        "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": message.text.strip()
    }

    save_behavior_data(behavior)

    msg = (
        f"‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n"
        f"üë∂ –£—á–µ–Ω–∏–∫: {behavior['—É—á–µ–Ω–∏–∫']}\n"
        f"üß† –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {behavior['–æ—Ü–µ–Ω–∫–∞']}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {behavior['–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}"
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

    await message.answer(msg, reply_markup=keyboard)
    await state.clear()

