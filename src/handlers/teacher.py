import os
import json
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from src.utils.database import load_user_data, load_schedule, save_user_data, DB_FILE

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
class EmergencyBoard(StatesGroup):
    waiting_for_message = State()

# üìÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
def days_of_week_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"), KeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫")],
            [KeyboardButton(text="–°—Ä–µ–¥–∞"), KeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥")],
            [KeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ (—É—á–∏—Ç–µ–ª—å)
@router.message(lambda m: m.text == "üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_teacher_data(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = load_user_data(user_id)
    if not user_data or user_data.get("role") != "–£—á–∏—Ç–µ–ª—å":
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return

    msg = (
        f"üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üÜî ID: {user_data['id']}\n"
        f"üë§ –§–ò–û: {user_data['fullname']}\n"
        f"üìå –†–æ–ª—å: {user_data['role']}"
    )
    await message.answer(msg)

# üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router.message(lambda m: m.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def teacher_schedule_view(message: types.Message, state: FSMContext):
    user_data = load_user_data(str(message.from_user.id))
    if user_data and user_data.get("role") == "–£—á–∏—Ç–µ–ª—å":
        await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_of_week_keyboard())
    else:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")

# üìÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
@router.message(lambda m: m.text in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"])
async def teacher_day_schedule(message: types.Message, state: FSMContext):
    user_data = load_user_data(str(message.from_user.id))
    if user_data.get("role") != "–£—á–∏—Ç–µ–ª—å":
        return

    schedule = load_schedule()
    lessons = schedule.get(message.text)
    if not lessons:
        await message.answer("‚ùå –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
        return

    msg = f"üìÖ <b>{message.text}</b>\n" + "\n".join(f"‚Ä¢ {l}" for l in lessons)
    await message.answer(msg, parse_mode="HTML", reply_markup=days_of_week_keyboard())

# üîì –í—ã–π—Ç–∏
@router.message(lambda m: m.text == "üîì –í—ã–π—Ç–∏")
async def teacher_logout(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = load_user_data(user_id)
    if user_data:
        user_data["authenticated"] = False
        save_user_data(user_id, user_data)

    await message.answer("–í—ã –≤—ã—à–ª–∏. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –∑–∞–Ω–æ–≤–æ.")
    await state.clear()

# üì¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–æ—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî —Å—Ç–∞—Ä—Ç
@router.message(lambda m: m.text == "üì¢ –î–æ—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
async def start_emergency_board(message: types.Message, state: FSMContext):
    user = load_user_data(str(message.from_user.id))
    if not user or user.get("role") != "–£—á–∏—Ç–µ–ª—å":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π.")
        return

    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EmergencyBoard.waiting_for_message)

# üì¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –¥–æ—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞
@router.message(EmergencyBoard.waiting_for_message)
async def send_emergency_to_all(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        with open(DB_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    count = 0
    for user_id in users:
        try:
            await message.bot.send_message(
                chat_id=user_id,
                text=f"üì¢ <b>–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è</b>:\n\n{text}",
                parse_mode="HTML"
            )
            count += 1
        except Exception:
            continue

    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()

# üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@router.message(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_to_menu(message: types.Message, state: FSMContext):
    user = load_user_data(str(message.from_user.id))
    if user and user.get("role") == "–£—á–∏—Ç–µ–ª—å":
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üì¢ –î–æ—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")],
                [KeyboardButton(text="üîì –í—ã–π—Ç–∏")]
            ],
            resize_keyboard=True
        )
        await message.answer("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
        await state.clear()

# /–ø–æ–≤–µ–¥–µ–Ω–∏–µ <–§–ò–û>
@router.message(lambda m: m.text.lower().startswith("/–ø–æ–≤–µ–¥–µ–Ω–∏–µ"))
async def show_behavior_for_student(message: types.Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞: /–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω")

    query_name = parts[1].strip().lower()
    path = "src/database/behavior.json"

    if not os.path.exists(path):
        return await message.answer("üìÅ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")

    with open(path, "r", encoding="utf-8") as f:
        try:
            records = json.load(f)
        except json.JSONDecodeError:
            return await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.")

    matches = [
        entry for entry in records
        if entry.get("—É—á–µ–Ω–∏–∫", "").strip().lower() == query_name
    ]

    if not matches:
        return await message.answer(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {query_name}")

    text = f"üìä –ü–æ–≤–µ–¥–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞: {query_name}\n\n"
    for i, entry in enumerate(matches, 1):
        text += (
            f"{i}. üóì {entry.get('–¥–∞—Ç–∞', '‚Äî')}\n"
            f"   üß† {entry.get('–æ—Ü–µ–Ω–∫–∞', '')}\n"
            f"   üí¨ {entry.get('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '')}\n\n"
        )

    await message.answer(text)
