from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from src.states.registration import Registration
from src.utils.database import save_user_data, load_user_data
import uuid
import random

router = Router()

ADMIN_PIN = "22059"  # –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å
PARENT_PASSWORD = "1234"
TEACHER_PIN = "4321"  # –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π PIN —É—á–∏—Ç–µ–ª—è

# üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def role_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£—á–∏—Ç–µ–ª—å"), KeyboardButton(text="–†–æ–¥–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")]
        ],
        resize_keyboard=True
    )

def yes_no_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def nav_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def main_menu_keyboard(role):
    if role == "–£—á–∏—Ç–µ–ª—å":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üß† –û—Ü–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ"), KeyboardButton(text="üì¢ –î–æ—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")],
                [KeyboardButton(text="üîì –í—ã–π—Ç–∏")]
            ],
            resize_keyboard=True
        )
    elif role == "–†–æ–¥–∏—Ç–µ–ª—å":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="üìä –ü–æ–≤–µ–¥–µ–Ω–∏–µ")],
                [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")],
                [KeyboardButton(text="üîì –í—ã–π—Ç–∏")]
            ],
            resize_keyboard=True
        )
    elif role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        return admin_menu_keyboard()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ

def admin_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="üìö –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìâ –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≤–µ–¥–µ–Ω–∏—è")],
            [KeyboardButton(text="üîì –í—ã–π—Ç–∏")]
        ],
        resize_keyboard=True
    )


# ‚ñ∂Ô∏è /start
@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    await message.answer("üë§ –ö—Ç–æ –≤—ã?", reply_markup=role_keyboard())
    await state.set_state(Registration.choosing_role)


@router.message(lambda m: m.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_last_place(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last = data.get("last_menu")

    if last == "choose_registration_path":
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?", reply_markup=yes_no_keyboard())
        await state.set_state(Registration.choosing_registration_path)

    elif last == "parent_menu":
        await message.answer("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è:", reply_markup=main_menu_keyboard("–†–æ–¥–∏—Ç–µ–ª—å"))
        await state.clear()

    elif last == "teacher_menu":
        await message.answer("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è:", reply_markup=main_menu_keyboard("–£—á–∏—Ç–µ–ª—å"))
        await state.clear()

    elif last == "admin_menu":
        await message.answer("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=main_menu_keyboard("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"))
        await state.clear()

    else:
        await message.answer("üë§ –ö—Ç–æ –≤—ã?", reply_markup=role_keyboard())
        await state.set_state(Registration.choosing_role)



# üî∏ –í—ã–±–æ—Ä —Ä–æ–ª–∏
@router.message(Registration.choosing_role)
async def choose_role(message: types.Message, state: FSMContext):
    role = message.text.strip()
    if role not in ["–£—á–∏—Ç–µ–ª—å", "–†–æ–¥–∏—Ç–µ–ª—å", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –£—á–∏—Ç–µ–ª—å, –†–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

    await state.update_data(role=role)

    if role == "–£—á–∏—Ç–µ–ª—å":
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π):")
        await state.set_state(Registration.entering_teacher_pin)

    elif role == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ PIN –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        await state.set_state(Registration.entering_admin_pin)

    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?", reply_markup=yes_no_keyboard())
        await state.set_state(Registration.choosing_registration_path)


# üîë –í–≤–æ–¥ PIN —É—á–∏—Ç–µ–ª—è
@router.message(Registration.entering_teacher_pin)
async def teacher_login(message: types.Message, state: FSMContext):
    if message.text.strip() == TEACHER_PIN:
        user_id = str(message.from_user.id)

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω?
        existing = load_user_data(user_id)
        if existing:
            await state.update_data(last_menu="teacher_menu")
            await message.answer("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å.")
            return

        # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∏—Ç–µ–ª—è
        user_data = {
            "id": user_id,
            "telegram_id": user_id,
            "fullname": "–£—á–∏—Ç–µ–ª—å",
            "role": "–£—á–∏—Ç–µ–ª—å",
            "authenticated": True,
            "pin": TEACHER_PIN
        }
        save_user_data(user_id, user_data)
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ —É—á–∏—Ç–µ–ª—å.", reply_markup=main_menu_keyboard("–£—á–∏—Ç–µ–ª—å"))
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ê–¥–º–∏–Ω–∞
@router.message(Registration.entering_admin_pin)
async def admin_login(message: types.Message, state: FSMContext):
    if message.text.strip() == ADMIN_PIN:
        user_id = str(message.from_user.id)

        user_data = {
            "id": user_id,
            "telegram_id": user_id,
            "fullname": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "role": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "authenticated": True,
            "pin": ADMIN_PIN
        }

        save_user_data(user_id, user_data)
        await state.update_data(last_menu="admin_menu")
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=admin_menu_keyboard())
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


# üî∏ –†–û–î–ò–¢–ï–õ–¨: –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏
@router.message(Registration.choosing_registration_path)
async def handle_parent_registration_choice(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞":
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à PIN-–∫–æ–¥:")
        await state.set_state(Registration.entering_password)
    elif message.text == "‚ùå –ù–µ—Ç":
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=nav_keyboard())
        await state.set_state(Registration.entering_fullname)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç.")

# üîê –í–≤–æ–¥ PIN –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
@router.message(Registration.entering_password)
async def check_parent_pin(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user_data = load_user_data(user_id)
    input_pin = message.text.strip()

    if not user_data or user_data.get("role") != "–†–æ–¥–∏—Ç–µ–ª—å":
        await state.update_data(last_menu="choose_registration_path")
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        await state.clear()
        return

    if input_pin == user_data.get("pin"):
        user_data["authenticated"] = True
        save_user_data(user_id, user_data)
        await message.answer("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", reply_markup=main_menu_keyboard("–†–æ–¥–∏—Ç–µ–ª—å"))
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# üßæ –í–≤–æ–¥ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è
@router.message(Registration.entering_fullname)
async def enter_fullname(message: types.Message, state: FSMContext):
    fullname = message.text.strip()
    await state.update_data(fullname=fullname)
    await message.answer("üë∂ –í–≤–µ–¥–∏—Ç–µ –§–ò –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(Registration.entering_child_name)

# üë∂ –í–≤–æ–¥ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞
@router.message(Registration.entering_child_name)
async def enter_child_name(message: types.Message, state: FSMContext):
    child_name = message.text.strip()
    await state.update_data(child_name=child_name)

    data = await state.get_data()
    user_id = str(message.from_user.id)
    user_uuid = str(uuid.uuid4())
    pin_code = str(random.randint(1000, 9999))

    user_data = {
        "id": user_uuid,
        "telegram_id": user_id,
        "fullname": data["fullname"],
        "child_name": data["child_name"],
        "role": "–†–æ–¥–∏—Ç–µ–ª—å",
        "authenticated": True,
        "pin": pin_code
    }

    save_user_data(user_id, user_data)

    msg = (
        f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üÜî ID: {user_uuid}\n"
        f"üîê –í–∞—à PIN: <code>{pin_code}</code>\n"
        f"üë§ –§–ò–û: {data['fullname']}\n"
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {data['child_name']}\n"
        f"üìå –†–æ–ª—å: –†–æ–¥–∏—Ç–µ–ª—å"
    )
    await message.answer(msg, parse_mode="HTML", reply_markup=main_menu_keyboard("–†–æ–¥–∏—Ç–µ–ª—å"))
    await state.clear()
