from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from src.states.registration import Registration
from src.utils.database import save_user_data
import uuid

router = Router()

PARENT_PASSWORD = "1234"
TEACHER_PASSWORD = "4321"

def nav_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def main_menu_keyboard(role):
    buttons = [
        [KeyboardButton(text="üìã –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="üîì –í—ã–π—Ç–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# ‚ñ∂Ô∏è /start
@router.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–£—á–∏—Ç–µ–ª—å"), KeyboardButton(text="–†–æ–¥–∏—Ç–µ–ª—å")]],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=keyboard)
    await state.set_state(Registration.choosing_role)

# üî∏ –í—ã–±–æ—Ä —Ä–æ–ª–∏
@router.message(Registration.choosing_role)
async def choose_role(message: types.Message, state: FSMContext):
    if message.text not in ["–£—á–∏—Ç–µ–ª—å", "–†–æ–¥–∏—Ç–µ–ª—å"]:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –£—á–∏—Ç–µ–ª—å –∏–ª–∏ –†–æ–¥–∏—Ç–µ–ª—å.")
    await state.update_data(role=message.text)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏:", reply_markup=nav_keyboard())
    await state.set_state(Registration.entering_password)

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
@router.message(Registration.entering_password)
async def verify_password(message: types.Message, state: FSMContext):
    user_input = message.text.strip()
    data = await state.get_data()
    role = data.get("role")

    if (role == "–£—á–∏—Ç–µ–ª—å" and user_input == TEACHER_PASSWORD) or \
       (role == "–†–æ–¥–∏—Ç–µ–ª—å" and user_input == PARENT_PASSWORD):
        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        await state.set_state(Registration.entering_fullname)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# üßæ –í–≤–æ–¥ –§–ò–û
@router.message(Registration.entering_fullname)
async def enter_fullname(message: types.Message, state: FSMContext):
    fullname = message.text.strip()
    await state.update_data(fullname=fullname)
    data = await state.get_data()

    if data.get("role") == "–†–æ–¥–∏—Ç–µ–ª—å":
        await message.answer("üë∂ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞:")
        await state.set_state(Registration.entering_child_name)
    else:
        await finish_registration(message, state)

# üë∂ –†–µ–±—ë–Ω–æ–∫
@router.message(Registration.entering_child_name)
async def enter_child_name(message: types.Message, state: FSMContext):
    child_name = message.text.strip()
    await state.update_data(child_name=child_name)
    await finish_registration(message, state)

# ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def finish_registration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = str(message.from_user.id)
    user_uuid = str(uuid.uuid4())

    user_data = {
        "id": user_uuid,
        "telegram_id": user_id,
        "fullname": data.get("fullname"),
        "role": data.get("role"),
        "authenticated": True
    }

    if data["role"] == "–†–æ–¥–∏—Ç–µ–ª—å":
        user_data["child_name"] = data.get("child_name")

    save_user_data(user_id, user_data)

    msg = (
        f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üÜî ID: {user_uuid}\n"
        f"üë§ –§–ò–û: {user_data['fullname']}\n"
        f"üìå –†–æ–ª—å: {user_data['role']}"
    )
    if user_data["role"] == "–†–æ–¥–∏—Ç–µ–ª—å":
        msg += f"\nüë∂ –†–µ–±—ë–Ω–æ–∫: {user_data['child_name']}"

    await message.answer(msg, reply_markup=main_menu_keyboard(user_data["role"]))
    await state.clear()
