import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "7204660500:AAF9mD9F6q-_QkFaL9U_d6dW7mbZ2rRD-WY"
ADMIN_PASSWORD = "12345"
TEACHER_PASSWORD = "123"  # –ü–∞—Ä–æ–ª—å –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
USERS_DB_FILE = "users_db.json"
SCHEDULE_FILE = "schedule.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegistrationState(StatesGroup):
    choosing_role = State()
    waiting_for_password_parent = State()
    waiting_for_fio_parent = State()
    waiting_for_password_teacher = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
def load_users_db():
    if os.path.exists(USERS_DB_FILE):
        with open(USERS_DB_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            for user_id, user_data in data.items():
                if "role" not in user_data:
                    user_data["role"] = "parent"
                if "role_name" not in user_data:
                    user_data["role_name"] = "–†–æ–¥–∏—Ç–µ–ª—å" if user_data["role"] == "parent" else "–£—á–∏—Ç–µ–ª—å"
                if "access" not in user_data:
                    user_data["access"] = True
            return data
    return {}

def load_schedule():
    try:
        if os.path.exists(SCHEDULE_FILE):
            with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return {}

users_db = load_users_db()
schedule_storage = load_schedule()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_role_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë™ –†–æ–¥–∏—Ç–µ–ª—å", callback_data="role_parent")],
            [InlineKeyboardButton(text="üë©‚Äçüè´ –£—á–∏—Ç–µ–ª—å", callback_data="role_teacher")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    )

def get_back_keyboard(to_state: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_{to_state}")]
        ]
    )

def get_main_menu(role):
    buttons = [
        [InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="show_schedule")]
    ]
    if role == "teacher":
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_schedule")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)

    if user_id in users_db:
        user_data = users_db[user_id]
        role = user_data.get("role", "parent")
        role_name = user_data.get("role_name", "–†–æ–¥–∏—Ç–µ–ª—å" if role == "parent" else "–£—á–∏—Ç–µ–ª—å")

        await message.answer(
            f"üîπ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {role_name}",
            reply_markup=get_main_menu(role)
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_role_keyboard()
        )
        await state.set_state(RegistrationState.choosing_role)

@dp.callback_query(RegistrationState.choosing_role)
async def process_role(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.replace("role_", "")

    if role == "parent":
        await callback.message.edit_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:", reply_markup=get_back_keyboard("role"))
        await state.set_state(RegistrationState.waiting_for_password_parent)
    elif role == "teacher":
        await callback.message.edit_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π:", reply_markup=get_back_keyboard("role"))
        await state.set_state(RegistrationState.waiting_for_password_teacher)

    await callback.answer()

@dp.message(RegistrationState.waiting_for_password_parent)
async def check_parent_password(message: types.Message, state: FSMContext):
    if message.text.strip() == ADMIN_PASSWORD:
        await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=get_back_keyboard("parent_password"))
        await state.set_state(RegistrationState.waiting_for_fio_parent)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_keyboard("role"))

@dp.message(RegistrationState.waiting_for_fio_parent)
async def save_parent(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    fio = message.text.strip()

    users_db[user_id] = {
        "fio": fio,
        "role": "parent",
        "role_name": "–†–æ–¥–∏—Ç–µ–ª—å",
        "access": True
    }

    try:
        with open(USERS_DB_FILE, "w", encoding="utf-8") as f:
            json.dump(users_db, f, ensure_ascii=False, indent=2)
        await message.answer(
            f"üë™ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è {fio} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=get_main_menu("parent")
        )
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    await state.clear()

@dp.message(RegistrationState.waiting_for_password_teacher)
async def check_teacher_password(message: types.Message, state: FSMContext):
    if message.text.strip() == TEACHER_PASSWORD:
        user_id = str(message.from_user.id)

        users_db[user_id] = {
            "role": "teacher",
            "role_name": "–£—á–∏—Ç–µ–ª—å",
            "access": True
        }

        try:
            with open(USERS_DB_FILE, "w", encoding="utf-8") as f:
                json.dump(users_db, f, ensure_ascii=False, indent=2)
            await message.answer(
                "üë©‚Äçüè´ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∏—Ç–µ–ª—å!",
                reply_markup=get_main_menu("teacher")
            )
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_keyboard("role"))

@dp.callback_query(lambda c: c.data.startswith("back_"))
async def handle_back(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.replace("back_", "")

    if action == "role":
        await callback.message.edit_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=get_role_keyboard())
        await state.set_state(RegistrationState.choosing_role)
    elif action == "parent_password":
        await callback.message.edit_text("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:", reply_markup=get_back_keyboard("role"))
        await state.set_state(RegistrationState.waiting_for_password_parent)

    await callback.answer()

@dp.callback_query(lambda c: c.data == "show_schedule")
async def show_schedule_handler(callback: types.CallbackQuery):
    try:
        global schedule_storage
        schedule_storage = load_schedule()

        if not schedule_storage:
            await callback.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", show_alert=True)
            return

        days = list(schedule_storage.keys())
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=day, callback_data=f"day_{day}")]
                for day in days
            ]
        )

        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_schedule_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("day_"))
async def show_day_schedule(callback: types.CallbackQuery):
    try:
        day = callback.data[4:]
        global schedule_storage
        schedule_storage = load_schedule()

        if day not in schedule_storage:
            await callback.answer("–î–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        subjects = schedule_storage[day]
        response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>{day}</b>:\n" + \
                   "\n".join(f"{i}. {subj}" for i, subj in enumerate(subjects, 1))

        await callback.message.edit_text(
            response,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text="‚Üê –ù–∞–∑–∞–¥",
                        callback_data="show_schedule"
                    )]
                ]
            )
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_day_schedule: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", show_alert=True)
    finally:
        await callback.answer()

def get_days_keyboard():
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            *[[InlineKeyboardButton(text=day, callback_data=f"day_{day}")] for day in days],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    )
    return keyboard

@dp.callback_query(lambda c: c.data == "main_menu")
async def handle_main_menu(callback: types.CallbackQuery):
    user_id = str(callback.from_user.id)
    if user_id in users_db:
        role = users_db[user_id].get("role", "parent")
        await callback.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu(role)
        )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", users_db)
    print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", schedule_storage)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())